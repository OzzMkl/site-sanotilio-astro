---
interface Props {
  images: string[];
  interval?: number;
}

const { images, interval = 3000 } = Astro.props;
---

<div class="relative overflow-hidden rounded-lg shadow-md" data-interval={interval}>
  <div class="slides relative h-32 md:h-80  transition-transform duration-500 ease-in-out">
    {images.map((image, index) => (
      <img
        src={image}
        alt={`Imagen ${index + 1}`}
        class="absolute top-0 left-0 w-full h-full object-cover"
        data-slide={index}
        style={{ transform: `translateX(${index * 100}%)` }}
      />
    ))}
  </div>
  <div class="absolute bottom-4 left-0 right-0 flex justify-center space-x-2">
    {images.map((_, index) => (
      <button
        class="w-3 h-3 rounded-full bg-gray-300 hover:bg-blue-500 cursor-pointer"
        data-dot={index}
      ></button>
    ))}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carousels: NodeListOf<HTMLDivElement> = document.querySelectorAll('.relative.overflow-hidden.rounded-lg.shadow-md');

    carousels.forEach((carousel) => {
      const slidesContainer: HTMLDivElement | null = carousel.querySelector('.slides');
      const slides: NodeListOf<HTMLImageElement> = carousel.querySelectorAll('.slides img');
      const dotsContainer: HTMLDivElement | null = carousel.querySelector('.space-x-2');
      const dots: NodeListOf<HTMLButtonElement> = carousel.querySelectorAll('[data-dot]');
      let currentIndex = 0;
      const intervalTime: number = parseInt(carousel.dataset.interval || '3000', 10);
      let intervalId: number | undefined;

      function updateCarousel(index: number): void {
        slides.forEach((slide, i) => {
          slide.style.transform = `translateX(${(i - index) * 100}%)`;
        });
        dots.forEach(dot => dot.classList.remove('bg-blue-500'));
        dots[index].classList.add('bg-blue-500');
      }

      function nextSlide(): void {
        currentIndex = (currentIndex + 1) % slides.length;
        updateCarousel(currentIndex);
      }

      function goToSlide(index: number): void {
        currentIndex = index;
        updateCarousel(currentIndex);
      }

      if (dotsContainer) {
        dotsContainer.addEventListener('click', (event: MouseEvent) => {
          const target = event.target as HTMLButtonElement;
          const dotIndex = target.dataset.dot;
          if (dotIndex !== undefined) {
            clearInterval(intervalId);
            goToSlide(parseInt(dotIndex, 10));
            intervalId = setInterval(nextSlide, intervalTime);
          }
        });
      }

      function startCarousel(): void {
        intervalId = setInterval(nextSlide, intervalTime);
      }

      startCarousel();

      carousel.addEventListener('mouseenter', () => clearInterval(intervalId));
      carousel.addEventListener('mouseleave', startCarousel);
    });
  });
</script>